"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestIncreaseNonceLib__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "batchId",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "newNonce",
                type: "uint256",
            },
        ],
        name: "NonceIncreasedFromLib",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "batchId",
                type: "uint256",
            },
        ],
        name: "increaseNonce",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b5061010e806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806379f7573a14602d575b600080fd5b603c6038366004609a565b603e565b005b600081815260336020526040812080547f6e6c2a169ed1d0ccf49fb789155d57448b8405088c7f40fcfaa03dea8569aeae92849291607a9060b2565b91829055506040805192835260208301919091520160405180910390a150565b60006020828403121560ab57600080fd5b5035919050565b60006001820160d157634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220ac7e6476ef395f0d18052a90f71a5d2d3a272ae4ae9e108620e0523d065e9ba464736f6c63430008110033";
class TestIncreaseNonceLib__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (args.length === 1) {
            super(_abi, _bytecode, args[0]);
        }
        else {
            super(...args);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
TestIncreaseNonceLib__factory.bytecode = _bytecode;
TestIncreaseNonceLib__factory.abi = _abi;
exports.TestIncreaseNonceLib__factory = TestIncreaseNonceLib__factory;
//# sourceMappingURL=TestIncreaseNonceLib__factory.js.map