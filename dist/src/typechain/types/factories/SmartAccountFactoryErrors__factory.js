"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartAccountFactoryErrors__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "smartAccount",
                type: "address",
            },
        ],
        name: "AlreadyInitialized",
        type: "error",
    },
    {
        inputs: [],
        name: "BaseImplementationCannotBeZero",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "caller",
                type: "address",
            },
        ],
        name: "CallerIsNotAnEntryPoint",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "caller",
                type: "address",
            },
        ],
        name: "CallerIsNotEntryPointOrOwner",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "caller",
                type: "address",
            },
        ],
        name: "CallerIsNotOwner",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "targetTxGas",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "gasPrice",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "success",
                type: "bool",
            },
        ],
        name: "CanNotEstimateGas",
        type: "error",
    },
    {
        inputs: [],
        name: "DelegateCallsOnly",
        type: "error",
    },
    {
        inputs: [],
        name: "EntryPointCannotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "ExecutionFailed",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "implementationAddress",
                type: "address",
            },
        ],
        name: "InvalidImplementation",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "restoredSigner",
                type: "address",
            },
            {
                internalType: "address",
                name: "expectedSigner",
                type: "address",
            },
        ],
        name: "InvalidSignature",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "caller",
                type: "address",
            },
        ],
        name: "MixedAuthFail",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "gasLeft",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "gasRequired",
                type: "uint256",
            },
        ],
        name: "NotEnoughGasLeft",
        type: "error",
    },
    {
        inputs: [],
        name: "OwnerCanNotBeSelf",
        type: "error",
    },
    {
        inputs: [],
        name: "OwnerCannotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "OwnerProvidedIsSame",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        name: "ProxyDeploymentFailed",
        type: "error",
    },
    {
        inputs: [],
        name: "TokenGasPriceFactorCanNotBeZero",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address",
            },
            {
                internalType: "address",
                name: "dest",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "TokenTransferFailed",
        type: "error",
    },
    {
        inputs: [],
        name: "TransferToZeroAddressAttempt",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "destLength",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "valueLength",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "funcLength",
                type: "uint256",
            },
        ],
        name: "WrongBatchProvided",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "contractSignature",
                type: "bytes",
            },
        ],
        name: "WrongContractSignature",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "uintS",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "contractSignatureLength",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "signatureLength",
                type: "uint256",
            },
        ],
        name: "WrongContractSignatureFormat",
        type: "error",
    },
];
const _bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122064ceee94e2a22762c17c77a8a0e0c292deb55a42b46ef0d57a5724b18925eac064736f6c63430008110033";
class SmartAccountFactoryErrors__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (args.length === 1) {
            super(_abi, _bytecode, args[0]);
        }
        else {
            super(...args);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
SmartAccountFactoryErrors__factory.bytecode = _bytecode;
SmartAccountFactoryErrors__factory.abi = _abi;
exports.SmartAccountFactoryErrors__factory = SmartAccountFactoryErrors__factory;
//# sourceMappingURL=SmartAccountFactoryErrors__factory.js.map