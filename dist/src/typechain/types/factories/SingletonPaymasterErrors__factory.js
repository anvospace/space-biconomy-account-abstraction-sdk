"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingletonPaymasterErrors__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "CanNotWithdrawToZeroAddress",
        type: "error",
    },
    {
        inputs: [],
        name: "DepositCanNotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "EntryPointCannotBeZero",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amountRequired",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "currentBalance",
                type: "uint256",
            },
        ],
        name: "InsufficientBalance",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "sigLength",
                type: "uint256",
            },
        ],
        name: "InvalidPaymasterSignatureLength",
        type: "error",
    },
    {
        inputs: [],
        name: "PaymasterIdCannotBeZero",
        type: "error",
    },
    {
        inputs: [],
        name: "VerifyingSignerCannotBeZero",
        type: "error",
    },
];
const _bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220e2a5f2bdc3497317cf2c544269f0e770db2ade7d2a7d3930b3b66176bb9499a364736f6c63430008110033";
class SingletonPaymasterErrors__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (args.length === 1) {
            super(_abi, _bytecode, args[0]);
        }
        else {
            super(...args);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
SingletonPaymasterErrors__factory.bytecode = _bytecode;
SingletonPaymasterErrors__factory.abi = _abi;
exports.SingletonPaymasterErrors__factory = SingletonPaymasterErrors__factory;
//# sourceMappingURL=SingletonPaymasterErrors__factory.js.map